/* eslint-disable @typescript-eslint/no-explicit-any */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 scene.gltf -t s -T 
Files: scene.gltf [94.18KB] > C:\Users\chemb\OneDrive\Documents\DEVS CHEMBER\threejs\r3f-basics\public\car\scene-transformed.glb [7.2MB] (-7550%)
Author: Martin Trafas (https://sketchfab.com/Bexxie)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/toyota-ae86-sprinter-trueno-zenki-a5737bf3cc9b4179a6e5ebe173ff70d9
Title: Toyota AE86 Sprinter Trueno Zenki
*/

//fixed type issue see this link --> https://github.com/pmndrs/gltfjsx/issues/101

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useEffect, useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { carState } from "./atom";
import { useProxy } from "valtio/utils";

type ActionName = "actionNameOne" | "actionNameTwo" | string;

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type GLTFResult = GLTF & {
  nodes: {
    Interior_Seatbelt_0: THREE.Mesh;
    Interior_InteriorPlastic2_0: THREE.Mesh;
    Interior_InteriorPlastic_0: THREE.Mesh;
    Interior_Interior_0: THREE.Mesh;
    SteeringWheel_SteeringWheel_0: THREE.Mesh;
    CarBody_Trim2_0: THREE.Mesh;
    CarBody_LampCovers_0: THREE.Mesh;
    CarBody_TailightFrame_0: THREE.Mesh;
    CarBody_Windows_0: THREE.Mesh;
    CarBody_Primary_0: THREE.Mesh;
    CarBody_LicensePlate_0: THREE.Mesh;
    FL_Wheel_Brake_Disc_0: THREE.Mesh;
    FL_Wheel_TireMaterial_0: THREE.Mesh;
    FL_Wheel_RimMaterial_0: THREE.Mesh;
    FL_Caliper_BrakeCaliper_0: THREE.Mesh;
  };
  materials: {
    Seatbelt: THREE.MeshStandardMaterial;
    InteriorPlastic2: THREE.MeshStandardMaterial;
    InteriorPlastic: THREE.MeshStandardMaterial;
    Interior: THREE.MeshStandardMaterial;
    SteeringWheel: THREE.MeshStandardMaterial;
    Trim2: THREE.MeshStandardMaterial;
    LampCovers: THREE.MeshPhysicalMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshPhysicalMaterial;
    LicensePlate: THREE.MeshStandardMaterial;
    Brake_Disc: THREE.MeshStandardMaterial;
    TireMaterial: THREE.MeshStandardMaterial;
    RimMaterial: THREE.MeshPhysicalMaterial;
    BrakeCaliper: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

const CarModel = (props: JSX.IntrinsicElements["group"]) => {
  const carRef = useRef<any>(null!);
  const snap = useProxy<any>(carState);

  const { nodes, materials } = useGLTF(
    "/car/scene-transformed.glb"
  ) as GLTFResult;

  // Animate model
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    carRef.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20;
    carRef.current.rotation.x = Math.cos(t / 4) / 8;
    carRef.current.rotation.y = Math.sin(t / 4) / 8;
    carRef.current.position.y = (1 + Math.sin(t / 1.5)) / 20;
  });

  // Cursor showing current color
  const [hovered, set] = useState<any>(null);
  useEffect(() => {
    const cursor = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><g filter="url(#filter0_d)"><path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="${snap.items[hovered]}"/></g><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/><text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em"><tspan x="35" y="63">${hovered}</tspan></text></g><defs><clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath><filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="2"/><feGaussianBlur stdDeviation="3"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>`;
    const auto = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/></svg>`;
    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
      hovered ? cursor : auto
    )}'), auto`;
  }, [hovered, snap.items]);
  // console.log("set hovered name ==>", hovered);
  return (
    <group
      {...props}
      dispose={null}
      ref={carRef}
      onPointerOver={(e) => (e.stopPropagation(), set(e.object.name))}
      onPointerOut={(e) => e.intersections.length === 0 && set(null)}
      onPointerMissed={() => (carState.current = null)}
      onPointerDown={(e) => (
        e.stopPropagation(), (carState.current = e.object.name)
      )}
    >
      <mesh
        name="Seatbelt"
        material-color={carState.items.Seatbelt}
        geometry={nodes.Interior_Seatbelt_0.geometry}
        material={materials.Seatbelt}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="InteriorPlastic2"
        material-color={carState.items.InteriorPlastic2}
        geometry={nodes.Interior_InteriorPlastic2_0.geometry}
        material={materials.InteriorPlastic2}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="InteriorPlastic"
        material-color={carState.items.InteriorPlastic}
        geometry={nodes.Interior_InteriorPlastic_0.geometry}
        material={materials.InteriorPlastic}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="Interior"
        material-color={carState.items.Interior}
        geometry={nodes.Interior_Interior_0.geometry}
        material={materials.Interior}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="SteeringWheel"
        material-color={carState.items.SteeringWheel}
        geometry={nodes.SteeringWheel_SteeringWheel_0.geometry}
        material={materials.SteeringWheel}
        position={[-36.68, 76.22, 30.484]}
        rotation={[-2.816, 0, -Math.PI]}
        scale={2.764}
      />
      <mesh
        material-color={carState.items.Trim2}
        geometry={nodes.CarBody_Trim2_0.geometry}
        material={materials.Trim2}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="LampCovers"
        material-color={carState.items.LampCovers}
        geometry={nodes.CarBody_LampCovers_0.geometry}
        material={materials.LampCovers}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="PaletteMaterial001"
        material-color={carState.items.PaletteMaterial001}
        geometry={nodes.CarBody_TailightFrame_0.geometry}
        material={materials.PaletteMaterial001}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="PaletteMaterial002"
        material-color={carState.items.PaletteMaterial002}
        geometry={nodes.CarBody_Windows_0.geometry}
        material={materials.PaletteMaterial002}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="PaletteMaterial003"
        material-color={carState.items.PaletteMaterial003}
        geometry={nodes.CarBody_Primary_0.geometry}
        material={materials.PaletteMaterial003}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="LicensePlate"
        material-color={carState.items.LicensePlate}
        geometry={nodes.CarBody_LicensePlate_0.geometry}
        material={materials.LicensePlate}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="Brake_Disc"
        material-color={carState.items.Brake_Disc}
        geometry={nodes.FL_Wheel_Brake_Disc_0.geometry}
        material={materials.Brake_Disc}
        position={[70.95, 31.714, 122.539]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="TireMaterial"
        material-color={carState.items.TireMaterial}
        geometry={nodes.FL_Wheel_TireMaterial_0.geometry}
        material={materials.TireMaterial}
        position={[70.95, 31.714, 122.539]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="RimMaterial"
        material-color={carState.items.RimMaterial}
        geometry={nodes.FL_Wheel_RimMaterial_0.geometry}
        material={materials.RimMaterial}
        position={[70.95, 31.714, 122.539]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        name="BrakeCaliper"
        material-color={carState.items.BrakeCaliper}
        geometry={nodes.FL_Caliper_BrakeCaliper_0.geometry}
        material={materials.BrakeCaliper}
        position={[64.097, 31.715, 122.542]}
        rotation={[0, Math.PI / 2, 0]}
        scale={11.35}
      />
    </group>
  );
};

useGLTF.preload("/car/scene-transformed.glb");

export default CarModel;
