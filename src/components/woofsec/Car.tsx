/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 scene.gltf -t s -T 
Files: scene.gltf [94.18KB] > C:\Users\chemb\OneDrive\Documents\DEVS CHEMBER\threejs\r3f-basics\public\car\scene-transformed.glb [7.2MB] (-7550%)
Author: Martin Trafas (https://sketchfab.com/Bexxie)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/toyota-ae86-sprinter-trueno-zenki-a5737bf3cc9b4179a6e5ebe173ff70d9
Title: Toyota AE86 Sprinter Trueno Zenki
*/

//fixed type issue see this link --> https://github.com/pmndrs/gltfjsx/issues/101

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type ActionName = "actionNameOne" | "actionNameTwo" | string;

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type GLTFResult = GLTF & {
  nodes: {
    Interior_Seatbelt_0: THREE.Mesh;
    Interior_InteriorPlastic2_0: THREE.Mesh;
    Interior_InteriorPlastic_0: THREE.Mesh;
    Interior_Interior_0: THREE.Mesh;
    SteeringWheel_SteeringWheel_0: THREE.Mesh;
    CarBody_Trim2_0: THREE.Mesh;
    CarBody_LampCovers_0: THREE.Mesh;
    CarBody_TailightFrame_0: THREE.Mesh;
    CarBody_Windows_0: THREE.Mesh;
    CarBody_Primary_0: THREE.Mesh;
    CarBody_LicensePlate_0: THREE.Mesh;
    FL_Wheel_Brake_Disc_0: THREE.Mesh;
    FL_Wheel_TireMaterial_0: THREE.Mesh;
    FL_Wheel_RimMaterial_0: THREE.Mesh;
    FL_Caliper_BrakeCaliper_0: THREE.Mesh;
  };
  materials: {
    Seatbelt: THREE.MeshStandardMaterial;
    InteriorPlastic2: THREE.MeshStandardMaterial;
    InteriorPlastic: THREE.MeshStandardMaterial;
    Interior: THREE.MeshStandardMaterial;
    SteeringWheel: THREE.MeshStandardMaterial;
    Trim2: THREE.MeshStandardMaterial;
    LampCovers: THREE.MeshPhysicalMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshPhysicalMaterial;
    LicensePlate: THREE.MeshStandardMaterial;
    Brake_Disc: THREE.MeshStandardMaterial;
    TireMaterial: THREE.MeshStandardMaterial;
    RimMaterial: THREE.MeshPhysicalMaterial;
    BrakeCaliper: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

const CarModel = (props: JSX.IntrinsicElements["group"]) => {
  const { nodes, materials } = useGLTF(
    "/car/scene-transformed.glb"
  ) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Interior_Seatbelt_0.geometry}
        material={materials.Seatbelt}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.Interior_InteriorPlastic2_0.geometry}
        material={materials.InteriorPlastic2}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.Interior_InteriorPlastic_0.geometry}
        material={materials.InteriorPlastic}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.Interior_Interior_0.geometry}
        material={materials.Interior}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.SteeringWheel_SteeringWheel_0.geometry}
        material={materials.SteeringWheel}
        position={[-36.68, 76.22, 30.484]}
        rotation={[-2.816, 0, -Math.PI]}
        scale={2.764}
      />
      <mesh
        geometry={nodes.CarBody_Trim2_0.geometry}
        material={materials.Trim2}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.CarBody_LampCovers_0.geometry}
        material={materials.LampCovers}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.CarBody_TailightFrame_0.geometry}
        material={materials.PaletteMaterial001}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.CarBody_Windows_0.geometry}
        material={materials.PaletteMaterial002}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.CarBody_Primary_0.geometry}
        material={materials.PaletteMaterial003}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.CarBody_LicensePlate_0.geometry}
        material={materials.LicensePlate}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.FL_Wheel_Brake_Disc_0.geometry}
        material={materials.Brake_Disc}
        position={[70.95, 31.714, 122.539]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.FL_Wheel_TireMaterial_0.geometry}
        material={materials.TireMaterial}
        position={[70.95, 31.714, 122.539]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.FL_Wheel_RimMaterial_0.geometry}
        material={materials.RimMaterial}
        position={[70.95, 31.714, 122.539]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        geometry={nodes.FL_Caliper_BrakeCaliper_0.geometry}
        material={materials.BrakeCaliper}
        position={[64.097, 31.715, 122.542]}
        rotation={[0, Math.PI / 2, 0]}
        scale={11.35}
      />
    </group>
  );
};

useGLTF.preload("/car/scene-transformed.glb");

export default CarModel;
